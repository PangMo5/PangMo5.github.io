[
{
	"uri": "http://blog.PangMo5.dev/categories/",
	"title": "Categories",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.PangMo5.dev/tags/combine/",
	"title": "Combine",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.PangMo5.dev/",
	"title": "PangMo5.dev",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.PangMo5.dev/posts/",
	"title": "Posts",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.PangMo5.dev/categories/swift/",
	"title": "Swift",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.PangMo5.dev/tags/swiftui/",
	"title": "SwiftUI",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.PangMo5.dev/posts/swiftui+combinequicklook/",
	"title": "SwiftUI + Combine 핥아보기",
	"tags": ["SwiftUI", "Combine", "WWDC2019"],
	"categories": [],
	"series": [],
	"description": "",
	"content": " Combine 관련 소스는 2020-01-19 기준 최신화 되었습니다.\n SwiftUI란?  SwiftUI is a modern way to declare user interfaces for any Apple platform. Create beautiful, dynamic apps faster than ever before.\n WWDC 2019에서 발표된 SwiftUI는 기존의 Storyboard와 Autolayout을 대체할 수 있는 UI 프레임워크 입니다.\n발표 후 개발자들에게 WWDC 2019 중 가장 큰 환호를 들었다고 해도 과언이 아닌데요.\n개인적으로 혁신이라 불릴만큼 매우 놀랍고 간편한 프레임 워크라고 생각합니다.\n일단 UI 프레임워크니 사진으로 먼저 만나보는게 좋겠죠(?)\nSwiftUI 핥아보기  현재 SwiftUI를 사용하기 위해선 macOS 10.15 beta 와 Xcode 11 beta 버전이 필요합니다.\n SwiftUI 기반의 프로젝트를 생성하는건 매우 간단합니다.\n  Xcode 11을 실행합니다.\n  Create a new Xcode project 버튼을 누릅니다.\n  Single View App을 선택 후 Next 버튼을 누릅니다.\n  간단한 정보를 기입 후 Use SwiftUI 체크 확인 후 Next버튼을 누릅니다.\n  그럼 짜잔~ 하고 처음 보는 화면이 반겨줍니다!\n기본적으로 ContentView가 생성되어있고 기존엔 볼 수 없었던 SceneDelegate 파일이 생겼네요.\n프로젝트 생성 후 기본적으로 프리뷰가 Pause 되어 있는 상태이니 Resume를 눌러줍니다.\n  그 후 이렇게 프리뷰가 활성화되면서 Hello World가 떠있는 목업을 볼 수 있습니다.\n  아주 간단하죠?\n해당 사진을 보면 기존 UIKit의 UILabel 와 같은 역할을 하는 View가 Text로 선언되어있는것을 볼 수 있습니다.\n아무런 이미지나 assets에 추가후 cmd + shift + l 단축키를 입력하면\n다음과 같은 창이 뜹니다.\n이 화면은 라이브러리라고 불리는듯합니다.\n라이브러리에서 코드나 프리뷰 화면으로 Drag \u0026amp; Drop 해서 View 를 추가할 수 있습니다.\n정말 편리하죠?\n이미지를 Text아래에 Drag \u0026amp; Drop 했더니 다음과 같이 Image View가 작성되었네요.\n이미지가 너무 큼지막하니 좌측 코드에서 다음과 같이 수정 해보겠습니다.\n1 2 3 4 5 6 7  VStack { Text(\u0026#34;Hello World\u0026#34;) Image(\u0026#34;IMG_5021\u0026#34;) .resizable() .aspectRatio(contentMode: .fit) .padding([.top, .bottom, .leading, .trailing], 16) }   이 모든 스타일링을 체이닝으로 처리 할 수 있다니 정말 놀랍지 않습니까?\n[대충 \u0026ldquo;애플\u0026hellip; 압도적인 감사..!\u0026rdquo; 하는 짤]\n스타일링도 직접 입력하지 않고 라이브러리에서 Drag \u0026amp; Drop 으로 추가 할 수 있습니다.\n여기서 해당 View를 기존 UITableView 형태로 만드는 법은 매우 쉽습니다!\n좌측 코드를 다음과 같이 바꿔주기만하면\u0026hellip;\n1 2 3 4 5 6 7 8 9  List(0..\u0026lt;5) {_ in VStack { Text(\u0026#34;Hello World\u0026#34;) Image(\u0026#34;IMG_5021\u0026#34;) .resizable() .aspectRatio(contentMode: .fit) .padding([.top, .bottom, .leading, .trailing], 16) } }   이렇게 List 클로저하나 씌웠을 뿐인데\n기존에 DataSource나 Delegate 처리 없이 바로 리스트 형태의 뷰가 만들어 진걸 볼 수 있습니다.\n프리뷰 화면에 프리뷰 버튼을 눌러주면 프리뷰가 활성화되어 스크롤도 해볼 수 있습니다.\n기존의 ViewController의 개념은 사라지고 View와 View 간의 이동 및 상호작용 등이 이루어 진다는것을 알 수 있습니다.\n더 자세한 View 레퍼런스는 공식 문서에서, 그에 상응하는 UIKIt 객체 비교는 해당 git repo 섹션에서 확인해주세요.\n애플에서 제공하는 Tutorials도 보면 좋을듯합니다.\nCombine 이란?  Customize handling of asynchronous events by combining event-processing operators.\n 이렇게 멋진 UI 프레임 워크를 만들었는데 데이터 바인딩도 기존에 방식을 그대로 사용하지 않겠죠.\n그래서 애플에선 Combine이라는 새로운 프레임워크를 공개했습니다.\n일단 공식 문서를 확인해 보면\u0026hellip;\n토픽들을 살펴 보면 어디서 많이 본 친구 같죠..?\n그렇습니다. 애플에서 비동기 리액티브 프로그래밍을 위한 프레임워크를 제공해주었습니다.\n기존에 많이 사용하던 RxSwift 와 매우 유사하게 보이는데요.\nRxCocoa 옆엔 RxSwift가 있고 SwiftUI 옆엔 Combine 이 있는거죠!\nRxSwift를 다뤄보셨다면 Combine 사용이 편할듯합니다.\nRxSwift와 Combine의 비교는 해당 블로그를 확인해주세요.\nCombine 핥아보기  이 친구는 핥아보기엔 너무 큰 친구이긴 하지만\u0026hellip;\n Combine은 간단하게 프로젝트에서 SwiftUI와 함께 어떻게 사용되는지 포스팅 해보겠습니다.\ngithub에 올라와있는 관련된 여러 repo들을 취합해서 개인적으로 가장 효율적이라고 생각하는 방식으로 진행하였습니다.\nSwiftUI 기반 프로젝트를 하나 생성 해준 후 생성된 ContentView 안에 다음과 같은 body 코드를 작성해줍니다. 1 2 3 4 5 6 7 8 9 10 11  var body: some View { NavigationView { List(0..\u0026lt;5) { index in HStack { Image(systemName: \u0026#34;star\u0026#34;) Text(\u0026#34;Hello World\u0026#34;) } } .navigationBarTitle(Text(\u0026#34;Sample App\u0026#34;)) } }   벌써 이렇게 아름다운(?) UI가 생성되었네요.\n이제 여기서 View에서 받은 액션에 대한 상단의 네비 바 타이틀 변경과 Alert 팝업을 띄워 보겠습니다.\n일단 View의 로직을 관리할 ViewModel을 만들어주겠습니다.\nContentViewModel이라는 이름의 swift 파일 생성 후 다음과 같이 코드를 작성해줍니다. 각 라인의 설명은 코드내에 주석으로 처리 하였습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  import Combine import SwiftUI class ContentViewModel: ObservableObject { //ObservableObject프로토콜을채택합니다. private var cancellables = [AnyCancellable]() //기존RxSwift의DisposeBag과같은역할을하는녀석입니다.해당객체가deInit될때메모리관리에사용됩니다. //InputOutput관련프로퍼티입니다.struct안에넣고싶은데Published프로퍼티래퍼가class에서만사용가능하다고하네요ㅠㅠ //Published프로퍼티래퍼를씌워줍니다. @Published var didTap = 0 @Published var isErrorShown = false @Published var labelText: String? init() { transform() } private func transform() { let isError = $didTap .map { $0 == 4 } //map오퍼레이터를사용해Bool값으로변환합니다. isError .assign(to: \\.isErrorShown, on: self) //isErrorPublisher를isErrorShown에KeyPath를사용해assign해줍니다. .store(in: \u0026amp;cancellables) //해당Cancellable을저장해줍니다. isError.filter { !$0 } .zip($didTap) //isError와didTap을zip으로묶어줍니다. .map { \u0026#34;Sucessed \\($0.1)\u0026#34; } .assign(to: \\.labelText, on: self) .store(in: \u0026amp;cancellables) } }   여기서 기존 ContentVIew코드를 다음과 같이 설정해줍니다. 각 라인의 설명은 코드내에 주석으로 처리 하였습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  struct ContentView: View { @ObservedObject var viewModel = ContentViewModel() //ObjectBiding프로퍼티래퍼로감싼viewModel를생성해줍니다. var body: some View { NavigationView { List(0..\u0026lt;5) { index in HStack { Image(systemName: \u0026#34;star\u0026#34;) Text(\u0026#34;Hello World\u0026#34;) }.onTapGesture { //해당View가탭될때호출됩니다. self.viewModel.didTap = index //viewModel의didTap프로퍼티에index를대입해줍니다. } } .alert(isPresented: $viewModel.isErrorShown, content: { () -\u0026gt; Alert in //viewModel.isErrorShown값이변경될때true일경우 Alert(title: Text(\u0026#34;Error\u0026#34;), message: Text(\u0026#34;Error\u0026#34;)) //Alert뷰를띄워줍니다. }) .navigationBarTitle(Text(viewModel.labelText ?? \u0026#34;Sample App\u0026#34;)) //viewModel.labelText을알아서옵져빙하여해당값으로네비게이션타이틀값을설정해줍니다. } } }   이렇게 코드를 작성한 뒤 빌드를 해보면\n다음과 같이 index가 0~3 까지의 Row 선택시 네비게이션 타이틀이 변경되는것을 볼 수 있고\nindex가 4 인 Row선택시 error Alert이 뜨는것을 볼 수 있습니다.\n최종 코드는 아래에서 확인 하실 수 있습니다.\nContentView 최종코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  struct ContentView: View { @ObservedObject var viewModel = ContentViewModel() var body: some View { NavigationView { List(0..\u0026lt;5) { index in HStack { Image(systemName: \u0026#34;star\u0026#34;) Text(\u0026#34;Hello World\u0026#34;) }.onTapGesture { self.viewModel.didTap = index } } .alert(isPresented: $viewModel.isErrorShown, content: { () -\u0026gt; Alert in Alert(title: Text(\u0026#34;Error\u0026#34;), message: Text(\u0026#34;Error\u0026#34;)) }) .navigationBarTitle(Text(viewModel.labelText ?? \u0026#34;Sample App\u0026#34;)) } } }   ContentViewModel 최종코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  class ContentViewModel: ObservableObject { private var cancellables = [AnyCancellable]() @Published var didTap = 0 @Published var isErrorShown = false @Published var labelText: String? init() { transform() } private func transform() { let isError = $didTap .map { $0 == 4 } isError .assign(to: \\.isErrorShown, on: self) .store(in: \u0026amp;cancellables) isError.filter { !$0 } .zip($didTap) .map { \u0026#34;Sucessed \\($0.1)\u0026#34; } .assign(to: \\.labelText, on: self) .store(in: \u0026amp;cancellables) } }   마치며\u0026hellip; 이렇게 WWDC 2019에서 공개된 SwiftUi와 Combine 프레임워크를 살펴 보았습니다.\n애플에서 Swift에 이렇게 많은 힘을 쏟아주는 것도 알 수 있어 정말 기뻤습니다.\n이렇게 멋진 프레임워크들을 iOS 13 이상에서만 사용할 수 있어 실업무에는 적용하기에 아직 많이 이른감이 있다는 점이 아쉽습니다.\n하지만 커뮤니티에서 떠돌고 있는 소문으로는 swift 5.1에서 추가된 return 생략, 프로퍼티 Delegate등으로 인해 막아둔것이라 정식 버전 출시에는 iOS 13 미만의 버전에서도 사용할 수 있게 될 수도 있다는 얘기도 있습니다.\n(뭐 안되면 걍 2년동안 개인 프로젝트에서만 써야죠..)\n아무튼 애플이 이와 같이 멋진 First-party 프레임 워크를 더욱 많이 만들어주고 개선 해주었으면 하는 마음입니다.\n"
},
{
	"uri": "http://blog.PangMo5.dev/tags/",
	"title": "Tags",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.PangMo5.dev/tags/wwdc2019/",
	"title": "WWDC2019",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://blog.PangMo5.dev/series/",
	"title": "Series",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
}]